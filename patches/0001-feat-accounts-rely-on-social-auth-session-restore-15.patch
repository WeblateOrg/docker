From 7d7a8be4460c9bfb005180fa13a8c1ae14143194 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michal=20=C4=8Ciha=C5=99?= <michal@weblate.org>
Date: Fri, 27 Jun 2025 15:50:58 +0200
Subject: [PATCH 1/1] feat(accounts): rely on social-auth session restore
 (#15299)

* feat(accounts): rely on social-auth session restore

This was introduced in the latest release and handles the situation
better than we did.

* chore(deps): update lockfile

---------

Co-authored-by: pre-commit-ci-lite[bot] <117423508+pre-commit-ci-lite[bot]@users.noreply.github.com>
---
 docs/specs/sbom/partial/python.json | 62 +++++++++++++++--------------
 docs/specs/sbom/sbom.json           | 58 ++++++++++++++-------------
 pyproject.toml                      |  4 +-
 uv.lock                             | 16 ++++----
 weblate/accounts/pipeline.py        |  6 ++-
 weblate/accounts/views.py           | 41 +------------------
 6 files changed, 79 insertions(+), 108 deletions(-)

diff --git weblate/accounts/pipeline.py weblate/accounts/pipeline.py
index f546136393..a5b2d75e1a 100644
--- weblate/accounts/pipeline.py
+++ weblate/accounts/pipeline.py
@@ -8,6 +8,7 @@ import time
 import unicodedata
 
 from django.conf import settings
+from django.contrib.auth.models import AnonymousUser
 from django.http import HttpResponseRedirect
 from django.shortcuts import redirect
 from django.urls import reverse
@@ -28,7 +29,7 @@ from weblate.accounts.utils import (
     cycle_session_keys,
     invalidate_reset_codes,
 )
-from weblate.auth.models import Invitation, User
+from weblate.auth.models import Invitation, User, get_anonymous
 from weblate.trans.defines import FULLNAME_LENGTH
 from weblate.utils import messages
 from weblate.utils.ratelimit import reset_rate_limit
@@ -267,6 +268,9 @@ def cleanup_next(strategy, **kwargs):
 
 def store_params(strategy, user: User, **kwargs):
     """Store Weblate specific parameters in the pipeline."""
+    # Map standard Django anonymuos user to Weblate database backed one
+    if isinstance(strategy.request.user, AnonymousUser):
+        strategy.request.user = get_anonymous()
     # Registering user
     registering_user = user.pk if user and user.is_authenticated else None
 
diff --git weblate/accounts/views.py weblate/accounts/views.py
index afc6013925..19c2ac9d45 100644
--- weblate/accounts/views.py
+++ weblate/accounts/views.py
@@ -10,7 +10,6 @@ from base64 import b32encode
 from binascii import unhexlify
 from collections import defaultdict
 from datetime import timedelta
-from importlib import import_module
 from typing import TYPE_CHECKING, Any
 from urllib.parse import quote
 
@@ -25,13 +24,7 @@ from django.contrib.auth.decorators import login_required
 from django.contrib.auth.views import LoginView, RedirectURLMixin
 from django.core.exceptions import ObjectDoesNotExist, PermissionDenied, ValidationError
 from django.core.mail.message import EmailMessage
-from django.core.signing import (
-    BadSignature,
-    SignatureExpired,
-    TimestampSigner,
-    dumps,
-    loads,
-)
+from django.core.signing import BadSignature, SignatureExpired, TimestampSigner
 from django.db import transaction
 from django.db.models import Count, Q
 from django.http import Http404, HttpResponse, HttpResponseRedirect, JsonResponse
@@ -71,7 +64,6 @@ from django_otp_webauthn.views import (
 )
 from rest_framework.authtoken.models import Token
 from social_core.actions import do_auth
-from social_core.backends.open_id import OpenIdAuth
 from social_core.exceptions import (
     AuthAlreadyAssociated,
     AuthCanceled,
@@ -160,9 +152,6 @@ from weblate.utils.zammad import ZammadError, submit_zammad_ticket
 if TYPE_CHECKING:
     from weblate.auth.models import AuthenticatedHttpRequest
 
-AUTHID_SALT = "weblate.authid"
-AUTHID_MAX_AGE = 600
-
 CONTACT_TEMPLATE = """
 Message from %(name)s <%(email)s>:
 
@@ -1339,16 +1328,6 @@ def social_auth(request: AuthenticatedHttpRequest, backend: str):
         msg = "Backend not found"
         raise Http404(msg) from None
 
-    # Store session ID for OpenID based auth. The session cookies will
-    # not be sent on returning POST request due to SameSite cookie policy
-    if isinstance(request.backend, OpenIdAuth):
-        request.backend.redirect_uri += "?authid={}".format(
-            dumps(
-                (request.session.session_key, get_ip_address(request)),
-                salt=AUTHID_SALT,
-            )
-        )
-
     try:
         return do_auth(request.backend, redirect_name=REDIRECT_FIELD_NAME)
     except AuthException as error:
@@ -1414,7 +1393,7 @@ def handle_missing_parameter(
 
 @csrf_exempt
 @never_cache
-def social_complete(request: AuthenticatedHttpRequest, backend: str):  # noqa: C901
+def social_complete(request: AuthenticatedHttpRequest, backend: str):
     """
     Social authentication completion endpoint.
 
@@ -1423,23 +1402,7 @@ def social_complete(request: AuthenticatedHttpRequest, backend: str):  # noqa: C
     - Handles backend errors gracefully
     - Intermediate page (autosubmitted by JavaScript) to avoid
       confirmations by bots
-    - Restores session from authid for some backends (see social_auth)
     """
-    if "authid" in request.GET:
-        try:
-            session_key, ip_address = loads(
-                request.GET["authid"],
-                max_age=AUTHID_MAX_AGE,
-                salt=AUTHID_SALT,
-            )
-        except (BadSignature, SignatureExpired):
-            report_error("authid signature")
-            return auth_redirect_token(request)
-        if ip_address != get_ip_address(request):
-            return auth_fail(request, "IP address changed, please try again.")
-        engine = import_module(settings.SESSION_ENGINE)
-        request.session = engine.SessionStore(session_key)
-
     if (
         "partial_token" in request.GET
         and "verification_code" in request.GET
-- 
2.39.5

