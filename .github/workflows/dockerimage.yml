name: Docker Image CI

on:
  push:
    branches-ignore:
      - "dependabot/**"
    tags:
      - "*"
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build, stable, ${{ matrix.architecture }}
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Configure Docker build
        run: .github/bin/get-buildx-args
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args)

  buildx:
    runs-on: ubuntu-latest
    name: Build, stable, ${{ matrix.architecture }}
    strategy:
      matrix:
        architecture: [linux/arm/v7, linux/arm64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.architecture }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Configure Docker build
        run: .github/bin/get-buildx-args
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args)

  test:
    runs-on: ubuntu-latest
    name: Test, stable, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
      COMPOSE_PROJECT_NAME: wl
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Test the Docker image
        run: |
          cd docker-compose
          TEST_CONTAINER=weblate/weblate:test ./test.sh

  test-ssl:
    runs-on: ubuntu-latest
    name: Test SSL, stable, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
      COMPOSE_PROJECT_NAME: wl
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Prepare the container
        run: |
          cd docker-compose
          TEST_CONTAINER=weblate/weblate:test GENERATE_ONLY=yes ./test.sh 4443 https
          docker-compose up -d
          docker-compose down
      - name: Generate SSL certificate
        run: |
          cd docker-compose
          VOLUMEPATH=$(docker volume inspect -f '{{.Mountpoint}}' wl_weblate-data)
          sudo mkdir -p $VOLUMEPATH/ssl
          sudo openssl req -x509 -nodes -days 365 -subj "/CN=weblate.example.com" -newkey rsa:2048 -keyout $VOLUMEPATH/ssl/privkey.pem -out $VOLUMEPATH/ssl/fullchain.pem
          sudo chown -R 1000:1000 $VOLUMEPATH/ssl
      - name: Test the Docker image with SSL
        run: |
          cd docker-compose
          TEST_CONTAINER=weblate/weblate:test ./test.sh 4443 https

  anchore:
    runs-on: ubuntu-latest
    name: Anchore Container Scan, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Anchore scan action
        uses: anchore/scan-action@v2.0.2
        with:
          image: "weblate/weblate:test"
          acs-report-enable: true
      - name: Upload Anchore Scan Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

  push_dockerhub:
    runs-on: ubuntu-latest
    name: Publish, stable
    needs: [test, test-ssl, anchore, buildx]
    if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/master')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache-arm64
        with:
          path: /tmp/.buildx-cache/linux/arm64
          key: ${{ runner.os }}-buildx-${{ github.sha }}-linux/arm64
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache-arm-v7
        with:
          path: /tmp/.buildx-cache/linux/arm/v7
          key: ${{ runner.os }}-buildx-${{ github.sha }}-linux/arm/v7
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache-amd64
        with:
          path: /tmp/.buildx-cache/linux/amd64
          key: ${{ runner.os }}-buildx-${{ github.sha }}-linux/amd64
      - name: DockerHub login
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Configure Docker build
        run: .github/bin/get-buildx-args publish
      - name: Publish the Docker images
        run: docker buildx build $(.github/bin/get-buildx-args publish)
