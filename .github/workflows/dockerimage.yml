name: Docker Image CI

on:
  push:
    branches-ignore:
      - "dependabot/**"
    tags:
      - "*"
  pull_request:

jobs:
  build:
    runs-on: ubuntu-20.04
    name: Build, stable, ${{ matrix.architecture }}
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Configure Docker build
        run: .github/bin/get-buildx-args
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args)

  buildx:
    runs-on: ubuntu-20.04
    name: Build, stable, ${{ matrix.architecture }}
    strategy:
      matrix:
        architecture: [linux/arm64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.architecture }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Configure Docker build
        run: .github/bin/get-buildx-args
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args)

  test:
    runs-on: ubuntu-20.04
    name: Test, stable, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
      COMPOSE_PROJECT_NAME: wl
      PYTHONUNBUFFERED: 1
      TEST_CONTAINER: weblate/weblate:test
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Generate configuration
        run: |
          cd docker-compose
          ./test-generate
      - name: Startup container
        run: |
          cd docker-compose
          ./test-boot
      - name: List Python packages
        run: |
          cd docker-compose
          ./test-pip
      - name: Inspect container
        run: |
          cd docker-compose
          ./test-inspect
      - name: Check service is running
        run: |
          cd docker-compose
          ./test-online
      - name: Check service health status
        run: |
          cd docker-compose
          ./test-health
      - name: Run Django Checks
        run: |
          cd docker-compose
          ./test-checks
      - name: Verify supervisor
        run: |
          cd docker-compose
          ./test-supervisor
      - name: Test admin creation
        run: |
          cd docker-compose
          ./test-admin
      - name: Verify SAML certificate
        run: |
          cd docker-compose
          ./test-saml
      - name: Run tests
        run: |
          cd docker-compose
          ./test-tests
      - name: Shutdown service
        run: |
          cd docker-compose
          ./test-stop

  test-ssl:
    runs-on: ubuntu-20.04
    name: Test SSL, stable, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
      COMPOSE_PROJECT_NAME: wl
      PYTHONUNBUFFERED: 1
      TEST_CONTAINER: weblate/weblate:test
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Generate configuration
        run: |
          cd docker-compose
          ./test-generate 4443 https
      - name: Generate SSL certificate
        run: |
          cd docker-compose
          docker-compose up -d
          docker-compose down
          VOLUMEPATH=$(docker volume inspect -f '{{.Mountpoint}}' wl_weblate-data)
          sudo mkdir -p $VOLUMEPATH/ssl
          sudo openssl req -x509 -nodes -days 365 -subj "/CN=localhost" -newkey rsa:2048 -keyout $VOLUMEPATH/ssl/privkey.pem -out $VOLUMEPATH/ssl/fullchain.pem
          sudo chown -R 1000:1000 $VOLUMEPATH/ssl
      - name: Startup container
        run: |
          cd docker-compose
          ./test-boot
      - name: List Python packages
        run: |
          cd docker-compose
          ./test-pip
      - name: Inspect container
        run: |
          cd docker-compose
          ./test-inspect
      - name: Check service is running
        run: |
          cd docker-compose
          ./test-online
      - name: Check service health status
        run: |
          cd docker-compose
          ./test-health
      - name: Run Django Checks
        run: |
          cd docker-compose
          ./test-checks
      - name: Verify supervisor
        run: |
          cd docker-compose
          ./test-supervisor
      - name: Test admin creation
        run: |
          cd docker-compose
          ./test-admin
      - name: Verify SAML certificate
        run: |
          cd docker-compose
          ./test-saml
      - name: Run tests
        run: |
          cd docker-compose
          ./test-tests
      - name: Shutdown service
        run: |
          cd docker-compose
          ./test-stop

  anchore:
    runs-on: ubuntu-20.04
    name: Anchore Container Scan, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Anchore scan action
        uses: anchore/scan-action@v2.0.4
        with:
          image: "weblate/weblate:test"
          acs-report-enable: true
          severity-cutoff: high
      - name: Upload Anchore Scan Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
      - uses: actions/upload-artifact@v2.2.3
        with:
          name: Anchore scan SARIF
          path: results.sarif

  trivy:
    runs-on: ubuntu-20.04
    name: Trivy Container Scan, ${{ matrix.architecture }}
    needs: [build]
    strategy:
      matrix:
        architecture: [linux/amd64]
    env:
      MATRIX_ARCHITECTURE: ${{ matrix.architecture }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache
        with:
          path: /tmp/.buildx-cache/${{ matrix.architecture }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.architecture }}
      - name: Build the Docker image
        run: docker buildx build $(.github/bin/get-buildx-args load)
      - name: List Docker images
        run: docker image ls --all
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.0.13
        with:
          image-ref: "weblate/weblate:test"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"
      - uses: actions/upload-artifact@v2.2.3
        with:
          name: Trivy scan SARIF
          path: trivy-results.sarif

  push_dockerhub:
    runs-on: ubuntu-20.04
    name: Publish, stable
    needs: [test, test-ssl, anchore, buildx]
    if: (startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main')) && github.repository == 'WeblateOrg/docker'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache-arm64
        with:
          path: /tmp/.buildx-cache/linux/arm64
          key: ${{ runner.os }}-buildx-${{ github.sha }}-linux/arm64
      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        id: cache-amd64
        with:
          path: /tmp/.buildx-cache/linux/amd64
          key: ${{ runner.os }}-buildx-${{ github.sha }}-linux/amd64
      - name: DockerHub login
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Configure Docker build
        run: .github/bin/get-buildx-args publish
      - name: Publish the Docker images
        run: docker buildx build $(.github/bin/get-buildx-args publish)
