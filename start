#!/bin/sh
set -e

export DBPASSWORD="$DB_PASSWORD"

export WEBLATE_CMD="/usr/local/bin/weblate"

run_weblate() {
    sudo -u weblate -E $WEBLATE_CMD "$@"
}

fail_dep() {
    >&2 echo "$1 not running!"
    >&2 echo
    >&2 echo "$1 is expected to run as separate Docker container."
    >&2 echo
    >&2 echo "Please see our docs for more details:"
    >&2 echo "https://docs.weblate.org/en/latest/admin/deployments.html#docker"
    exit 1
}

# Wait for memcached
until (echo stats; echo quit) | nc ${MEMCACHED_HOST:-127.0.0.1} ${MEMCACHED_PORT:-11211} > /dev/null 2>&1 ; do
    >&2 echo "memcached is unavailable - sleeping"
    TIMEOUT=$(($TIMEOUT + 1))
    if [ $TIMEOUT -gt 60 ] ; then
        (echo stats; echo quit) | nc ${MEMCACHED_HOST:-127.0.0.1} ${MEMCACHED_PORT:-11211}
        fail_dep memcached
    fi
    sleep 1
done

if [ -z "$DB_HOST" ] ; then
    export DB_HOST=database
fi
if [ -z "$DB_PORT" ] ; then
    export DB_PORT=
fi

# Wait for database to get available

if [ "$DB_ENGINE" = "django.db.backends.mysql" ] ; then
    TIMEOUT=0
    until mysql -h "$DB_HOST" -P "$DB_PORT" -D "$DB_DATABASE" -u "$DB_USER" -p"$DB_PASSWORD" -e "use ${DB_DATABASE}" > /dev/null 2>&1 ; do
        >&2 echo "MySQL is unavailable - sleeping"
        TIMEOUT=$(($TIMEOUT + 1))
        if [ $TIMEOUT -gt 60 ] ; then
            mysql -h "$DB_HOST" -P "$DB_PORT" -D "$DB_DATABASE" -u "$DB_USER" -p"$DB_PASSWORD" -e 'use "$DB_DATABASE"'
            fail_dep MySQL
        fi
        sleep 1
    done
elif [ "$DB_ENGINE" = "django.db.backends.postgresql_psycopg2" ] ; then
    TIMEOUT=0
    until psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_DATABASE" -U "$DB_USER" -c 'SELECT 1' > /dev/null 2>&1 ; do
        >&2 echo "Postgres is unavailable - sleeping"
        TIMEOUT=$(($TIMEOUT + 1))
        if [ $TIMEOUT -gt 60 ] ; then
            psql -h "$DB_HOST" -p "$DB_PORT" -d "$DB_DATABASE" -U "$DB_USER" -c 'SELECT 1'
            fail_dep PosgreSQL
        fi
        sleep 1
    done
fi

unset DBPASSWORD

>&2 echo "Database is up"

# Generate secret
if [ ! -f /app/data/secret ] ; then
    # https://github.com/django/django/blob/1.10.2/django/utils/crypto.py#L54-L56
    python -c "from django.utils.crypto import get_random_string; print get_random_string(50)" > /app/data/secret
fi

# Migrate database to current version and collect static files
if [ "x$1" = "xrunserver" ] ; then
    run_weblate migrate
    run_weblate collectstatic --noinput
    if [ -n "$WEBLATE_ADMIN_PASSWORD" ] ; then
        # This will fail on consequent runs
        run_weblate createadmin --password="$WEBLATE_ADMIN_PASSWORD" --update --email="$WEBLATE_ADMIN_EMAIL" --name="$WEBLATE_ADMIN_NAME" || true
    fi
    if [ -n "$WEBLATE_ALLOWED_HOSTS" ] ; then
        run_weblate changesite --set-name "${WEBLATE_ALLOWED_HOSTS%%,*}"
    fi
    # Create supervisor log dirs and files
    LOGFILE=/var/log/supervisor/supervisord.log
    mkdir -p `dirname $LOGFILE`
    touch $LOGFILE
    # uswgi dir
    mkdir -p /run/uwsgi/app/weblate
    chown weblate:weblate /run/uwsgi/app/weblate
    #  Execute supervisor
    exec supervisord --nodaemon --loglevel=debug
fi

# Start the management command
run_weblate "$@"
